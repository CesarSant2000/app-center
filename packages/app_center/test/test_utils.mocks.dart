// Mocks generated by Mockito 5.4.4 from annotations
// in app_center/test/test_utils.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;
import 'dart:ui' as _i13;

import 'package:app_center/appstream/appstream.dart' as _i6;
import 'package:app_center/deb/deb_model.dart' as _i14;
import 'package:app_center/manage/manage_model.dart' as _i17;
import 'package:app_center/packagekit/packagekit.dart' as _i7;
import 'package:app_center/ratings/ratings_service.dart' as _i20;
import 'package:app_center/snapd/multisnap_model.dart' as _i11;
import 'package:app_center/snapd/snapd.dart' as _i2;
import 'package:app_center_ratings_client/app_center_ratings_client.dart'
    as _i10;
import 'package:app_center_ratings_client/src/chart.dart' as _i21;
import 'package:appstream/appstream.dart' as _i8;
import 'package:dbus/dbus.dart' as _i19;
import 'package:file/file.dart' as _i9;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i3;
import 'package:gtk/src/gtk_application_notifier.dart' as _i18;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i15;
import 'package:packagekit/packagekit.dart' as _i16;
import 'package:snapcraft_launcher/snapcraft_launcher.dart' as _i5;
import 'package:snapd/snapd.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSnapdService_0 extends _i1.SmartFake implements _i2.SnapdService {
  _FakeSnapdService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncValue_1<T> extends _i1.SmartFake implements _i3.AsyncValue<T> {
  _FakeAsyncValue_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnap_2 extends _i1.SmartFake implements _i4.Snap {
  _FakeSnap_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePrivilegedDesktopLauncher_3 extends _i1.SmartFake
    implements _i5.PrivilegedDesktopLauncher {
  _FakePrivilegedDesktopLauncher_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppstreamService_4 extends _i1.SmartFake
    implements _i6.AppstreamService {
  _FakeAppstreamService_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePackageKitService_5 extends _i1.SmartFake
    implements _i7.PackageKitService {
  _FakePackageKitService_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppstreamComponent_6 extends _i1.SmartFake
    implements _i8.AppstreamComponent {
  _FakeAppstreamComponent_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdatesModel_7 extends _i1.SmartFake implements _i2.UpdatesModel {
  _FakeUpdatesModel_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystem_8 extends _i1.SmartFake implements _i9.FileSystem {
  _FakeFileSystem_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnapdSystemInfoResponse_9 extends _i1.SmartFake
    implements _i4.SnapdSystemInfoResponse {
  _FakeSnapdSystemInfoResponse_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnapdConnectionsResponse_10 extends _i1.SmartFake
    implements _i4.SnapdConnectionsResponse {
  _FakeSnapdConnectionsResponse_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnapdLoginResponse_11 extends _i1.SmartFake
    implements _i4.SnapdLoginResponse {
  _FakeSnapdLoginResponse_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnapdChange_12 extends _i1.SmartFake implements _i4.SnapdChange {
  _FakeSnapdChange_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePackageKitTransaction_13 extends _i1.SmartFake
    implements _i7.PackageKitTransaction {
  _FakePackageKitTransaction_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRatingsClient_14 extends _i1.SmartFake
    implements _i10.RatingsClient {
  _FakeRatingsClient_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRating_15 extends _i1.SmartFake implements _i10.Rating {
  _FakeRating_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_16 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$VoteCopyWith_17<$Res> extends _i1.SmartFake
    implements _i10.$VoteCopyWith<$Res> {
  _Fake$VoteCopyWith_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MultiSnapModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultiSnapModel extends _i1.Mock implements _i11.MultiSnapModel {
  MockMultiSnapModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SnapdService get snapd => (super.noSuchMethod(
        Invocation.getter(#snapd),
        returnValue: _FakeSnapdService_0(
          this,
          Invocation.getter(#snapd),
        ),
      ) as _i2.SnapdService);

  @override
  _i2.SnapCategoryEnum get category => (super.noSuchMethod(
        Invocation.getter(#category),
        returnValue: _i2.SnapCategoryEnum.artAndDesign,
      ) as _i2.SnapCategoryEnum);

  @override
  List<_i4.Snap> get categorySnaps => (super.noSuchMethod(
        Invocation.getter(#categorySnaps),
        returnValue: <_i4.Snap>[],
      ) as List<_i4.Snap>);

  @override
  set categorySnaps(List<_i4.Snap>? _categorySnaps) => super.noSuchMethod(
        Invocation.setter(
          #categorySnaps,
          _categorySnaps,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.AsyncValue<void> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_1<void>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.AsyncValue<void>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i12.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> cancel() => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> installAll() => (super.noSuchMethod(
        Invocation.method(
          #installAll,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  void addListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SnapLauncher].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnapLauncher extends _i1.Mock implements _i2.SnapLauncher {
  MockSnapLauncher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Snap get snap => (super.noSuchMethod(
        Invocation.getter(#snap),
        returnValue: _FakeSnap_2(
          this,
          Invocation.getter(#snap),
        ),
      ) as _i4.Snap);

  @override
  _i5.PrivilegedDesktopLauncher get launcher => (super.noSuchMethod(
        Invocation.getter(#launcher),
        returnValue: _FakePrivilegedDesktopLauncher_3(
          this,
          Invocation.getter(#launcher),
        ),
      ) as _i5.PrivilegedDesktopLauncher);

  @override
  bool get isLaunchable => (super.noSuchMethod(
        Invocation.getter(#isLaunchable),
        returnValue: false,
      ) as bool);

  @override
  void open() => super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DebModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockDebModel extends _i1.Mock implements _i14.DebModel {
  MockDebModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.AppstreamService get appstream => (super.noSuchMethod(
        Invocation.getter(#appstream),
        returnValue: _FakeAppstreamService_4(
          this,
          Invocation.getter(#appstream),
        ),
      ) as _i6.AppstreamService);

  @override
  _i7.PackageKitService get packageKit => (super.noSuchMethod(
        Invocation.getter(#packageKit),
        returnValue: _FakePackageKitService_5(
          this,
          Invocation.getter(#packageKit),
        ),
      ) as _i7.PackageKitService);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i8.AppstreamComponent get component => (super.noSuchMethod(
        Invocation.getter(#component),
        returnValue: _FakeAppstreamComponent_6(
          this,
          Invocation.getter(#component),
        ),
      ) as _i8.AppstreamComponent);

  @override
  set packageInfo(_i16.PackageKitPackageEvent? _packageInfo) =>
      super.noSuchMethod(
        Invocation.setter(
          #packageInfo,
          _packageInfo,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.AsyncValue<void> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_1<void>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.AsyncValue<void>);

  @override
  bool get isInstalled => (super.noSuchMethod(
        Invocation.getter(#isInstalled),
        returnValue: false,
      ) as bool);

  @override
  _i12.Stream<_i16.PackageKitErrorCodeEvent> get errorStream =>
      (super.noSuchMethod(
        Invocation.getter(#errorStream),
        returnValue: _i12.Stream<_i16.PackageKitErrorCodeEvent>.empty(),
      ) as _i12.Stream<_i16.PackageKitErrorCodeEvent>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i12.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> install() => (super.noSuchMethod(
        Invocation.method(
          #install,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> remove() => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> cancel() => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  void addListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ManageModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockManageModel extends _i1.Mock implements _i17.ManageModel {
  MockManageModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SnapdService get snapd => (super.noSuchMethod(
        Invocation.getter(#snapd),
        returnValue: _FakeSnapdService_0(
          this,
          Invocation.getter(#snapd),
        ),
      ) as _i2.SnapdService);

  @override
  _i2.UpdatesModel get updatesModel => (super.noSuchMethod(
        Invocation.getter(#updatesModel),
        returnValue: _FakeUpdatesModel_7(
          this,
          Invocation.getter(#updatesModel),
        ),
      ) as _i2.UpdatesModel);

  @override
  _i3.AsyncValue<void> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_1<void>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.AsyncValue<void>);

  @override
  Iterable<_i4.Snap> get refreshableSnaps => (super.noSuchMethod(
        Invocation.getter(#refreshableSnaps),
        returnValue: <_i4.Snap>[],
      ) as Iterable<_i4.Snap>);

  @override
  Iterable<_i4.Snap> get nonRefreshableSnaps => (super.noSuchMethod(
        Invocation.getter(#nonRefreshableSnaps),
        returnValue: <_i4.Snap>[],
      ) as Iterable<_i4.Snap>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i12.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SnapdService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnapdService extends _i1.Mock implements _i2.SnapdService {
  MockSnapdService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get allowInteraction => (super.noSuchMethod(
        Invocation.getter(#allowInteraction),
        returnValue: false,
      ) as bool);

  @override
  set allowInteraction(bool? _allowInteraction) => super.noSuchMethod(
        Invocation.setter(
          #allowInteraction,
          _allowInteraction,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set userAgent(String? value) => super.noSuchMethod(
        Invocation.setter(
          #userAgent,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.FileSystem get defaultFileSystem => (super.noSuchMethod(
        Invocation.getter(#defaultFileSystem),
        returnValue: _FakeFileSystem_8(
          this,
          Invocation.getter(#defaultFileSystem),
        ),
      ) as _i9.FileSystem);

  @override
  _i12.Future<void> waitChange(String? changeId) => (super.noSuchMethod(
        Invocation.method(
          #waitChange,
          [changeId],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> loadAuthorization({String? path}) => (super.noSuchMethod(
        Invocation.method(
          #loadAuthorization,
          [],
          {#path: path},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  void setAuthorization(
    String? macaroon,
    List<String>? discharges,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setAuthorization,
          [
            macaroon,
            discharges,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<_i4.SnapdSystemInfoResponse> systemInfo() => (super.noSuchMethod(
        Invocation.method(
          #systemInfo,
          [],
        ),
        returnValue: _i12.Future<_i4.SnapdSystemInfoResponse>.value(
            _FakeSnapdSystemInfoResponse_9(
          this,
          Invocation.method(
            #systemInfo,
            [],
          ),
        )),
      ) as _i12.Future<_i4.SnapdSystemInfoResponse>);

  @override
  _i12.Future<List<_i4.Snap>> getSnaps() => (super.noSuchMethod(
        Invocation.method(
          #getSnaps,
          [],
        ),
        returnValue: _i12.Future<List<_i4.Snap>>.value(<_i4.Snap>[]),
      ) as _i12.Future<List<_i4.Snap>>);

  @override
  _i12.Future<_i4.Snap> getSnap(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getSnap,
          [name],
        ),
        returnValue: _i12.Future<_i4.Snap>.value(_FakeSnap_2(
          this,
          Invocation.method(
            #getSnap,
            [name],
          ),
        )),
      ) as _i12.Future<_i4.Snap>);

  @override
  _i12.Future<List<_i4.SnapApp>> getApps({
    List<String>? names,
    _i4.SnapdAppFilter? filter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getApps,
          [],
          {
            #names: names,
            #filter: filter,
          },
        ),
        returnValue: _i12.Future<List<_i4.SnapApp>>.value(<_i4.SnapApp>[]),
      ) as _i12.Future<List<_i4.SnapApp>>);

  @override
  _i12.Future<List<_i4.SnapdCategoryDetails>> getCategories() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue: _i12.Future<List<_i4.SnapdCategoryDetails>>.value(
            <_i4.SnapdCategoryDetails>[]),
      ) as _i12.Future<List<_i4.SnapdCategoryDetails>>);

  @override
  _i12.Future<_i4.SnapdConnectionsResponse> getConnections({
    String? snap,
    String? interface,
    _i4.SnapdConnectionFilter? filter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConnections,
          [],
          {
            #snap: snap,
            #interface: interface,
            #filter: filter,
          },
        ),
        returnValue: _i12.Future<_i4.SnapdConnectionsResponse>.value(
            _FakeSnapdConnectionsResponse_10(
          this,
          Invocation.method(
            #getConnections,
            [],
            {
              #snap: snap,
              #interface: interface,
              #filter: filter,
            },
          ),
        )),
      ) as _i12.Future<_i4.SnapdConnectionsResponse>);

  @override
  _i12.Future<String> refreshMany(List<String>? names) => (super.noSuchMethod(
        Invocation.method(
          #refreshMany,
          [names],
        ),
        returnValue: _i12.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #refreshMany,
            [names],
          ),
        )),
      ) as _i12.Future<String>);

  @override
  _i12.Future<String> installMany(
    List<String>? names, {
    bool? classic = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #installMany,
          [names],
          {#classic: classic},
        ),
        returnValue: _i12.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #installMany,
            [names],
            {#classic: classic},
          ),
        )),
      ) as _i12.Future<String>);

  @override
  _i12.Future<String> connect(
    String? snap,
    String? plug,
    String? slotSnap,
    String? slot,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [
            snap,
            plug,
            slotSnap,
            slot,
          ],
        ),
        returnValue: _i12.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #connect,
            [
              snap,
              plug,
              slotSnap,
              slot,
            ],
          ),
        )),
      ) as _i12.Future<String>);

  @override
  _i12.Future<String> disconnect(
    String? plugSnap,
    String? plug,
    String? slotSnap,
    String? slot,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [
            plugSnap,
            plug,
            slotSnap,
            slot,
          ],
        ),
        returnValue: _i12.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #disconnect,
            [
              plugSnap,
              plug,
              slotSnap,
              slot,
            ],
          ),
        )),
      ) as _i12.Future<String>);

  @override
  _i12.Future<List<_i4.Snap>> find({
    String? query,
    String? name,
    String? category,
    String? section,
    _i4.SnapFindFilter? filter,
    _i4.SnapFindScope? scope,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #find,
          [],
          {
            #query: query,
            #name: name,
            #category: category,
            #section: section,
            #filter: filter,
            #scope: scope,
          },
        ),
        returnValue: _i12.Future<List<_i4.Snap>>.value(<_i4.Snap>[]),
      ) as _i12.Future<List<_i4.Snap>>);

  @override
  _i12.Future<_i4.SnapdLoginResponse> login(
    String? email,
    String? password, {
    String? otp,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
          {#otp: otp},
        ),
        returnValue: _i12.Future<_i4.SnapdLoginResponse>.value(
            _FakeSnapdLoginResponse_11(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
            {#otp: otp},
          ),
        )),
      ) as _i12.Future<_i4.SnapdLoginResponse>);

  @override
  _i12.Future<dynamic> logout(int? id) => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [id],
        ),
        returnValue: _i12.Future<dynamic>.value(),
      ) as _i12.Future<dynamic>);

  @override
  _i12.Future<String> install(
    String? name, {
    String? channel,
    String? revision,
    bool? classic = false,
    bool? dangerous = false,
    bool? devmode = false,
    bool? jailmode = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #install,
          [name],
          {
            #channel: channel,
            #revision: revision,
            #classic: classic,
            #dangerous: dangerous,
            #devmode: devmode,
            #jailmode: jailmode,
          },
        ),
        returnValue: _i12.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #install,
            [name],
            {
              #channel: channel,
              #revision: revision,
              #classic: classic,
              #dangerous: dangerous,
              #devmode: devmode,
              #jailmode: jailmode,
            },
          ),
        )),
      ) as _i12.Future<String>);

  @override
  _i12.Future<String> refresh(
    String? name, {
    String? channel,
    bool? classic = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [name],
          {
            #channel: channel,
            #classic: classic,
          },
        ),
        returnValue: _i12.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #refresh,
            [name],
            {
              #channel: channel,
              #classic: classic,
            },
          ),
        )),
      ) as _i12.Future<String>);

  @override
  _i12.Future<String> remove(
    String? name, {
    bool? purge = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #remove,
          [name],
          {#purge: purge},
        ),
        returnValue: _i12.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #remove,
            [name],
            {#purge: purge},
          ),
        )),
      ) as _i12.Future<String>);

  @override
  _i12.Future<String> enable(String? name) => (super.noSuchMethod(
        Invocation.method(
          #enable,
          [name],
        ),
        returnValue: _i12.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #enable,
            [name],
          ),
        )),
      ) as _i12.Future<String>);

  @override
  _i12.Future<String> disable(String? name) => (super.noSuchMethod(
        Invocation.method(
          #disable,
          [name],
        ),
        returnValue: _i12.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #disable,
            [name],
          ),
        )),
      ) as _i12.Future<String>);

  @override
  _i12.Future<_i4.SnapdChange> getChange(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getChange,
          [id],
        ),
        returnValue: _i12.Future<_i4.SnapdChange>.value(_FakeSnapdChange_12(
          this,
          Invocation.method(
            #getChange,
            [id],
          ),
        )),
      ) as _i12.Future<_i4.SnapdChange>);

  @override
  _i12.Future<List<_i4.SnapdChange>> getChanges({
    _i4.SnapdChangeFilter? filter,
    String? name,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChanges,
          [],
          {
            #filter: filter,
            #name: name,
          },
        ),
        returnValue:
            _i12.Future<List<_i4.SnapdChange>>.value(<_i4.SnapdChange>[]),
      ) as _i12.Future<List<_i4.SnapdChange>>);

  @override
  _i12.Future<_i4.SnapdChange> abortChange(String? id) => (super.noSuchMethod(
        Invocation.method(
          #abortChange,
          [id],
        ),
        returnValue: _i12.Future<_i4.SnapdChange>.value(_FakeSnapdChange_12(
          this,
          Invocation.method(
            #abortChange,
            [id],
          ),
        )),
      ) as _i12.Future<_i4.SnapdChange>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Stream<List<_i4.Snap>> getCategory(
    String? name, {
    Duration? expiry = const Duration(days: 1),
    _i9.FileSystem? fileSystem,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategory,
          [name],
          {
            #expiry: expiry,
            #fileSystem: fileSystem,
          },
        ),
        returnValue: _i12.Stream<List<_i4.Snap>>.empty(),
      ) as _i12.Stream<List<_i4.Snap>>);

  @override
  _i12.Stream<List<_i4.Snap>> getStoreSnaps(
    List<String>? names, {
    Duration? expiry = const Duration(minutes: 1),
    _i9.FileSystem? fileSystem,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoreSnaps,
          [names],
          {
            #expiry: expiry,
            #fileSystem: fileSystem,
          },
        ),
        returnValue: _i12.Stream<List<_i4.Snap>>.empty(),
      ) as _i12.Stream<List<_i4.Snap>>);

  @override
  _i12.Stream<_i4.SnapdChange> watchChange(
    String? id, {
    Duration? interval = const Duration(milliseconds: 100),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchChange,
          [id],
          {#interval: interval},
        ),
        returnValue: _i12.Stream<_i4.SnapdChange>.empty(),
      ) as _i12.Stream<_i4.SnapdChange>);

  @override
  _i12.Stream<List<String>> watchChanges({
    String? name,
    Duration? interval = const Duration(milliseconds: 100),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchChanges,
          [],
          {
            #name: name,
            #interval: interval,
          },
        ),
        returnValue: _i12.Stream<List<String>>.empty(),
      ) as _i12.Stream<List<String>>);
}

/// A class which mocks [UpdatesModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdatesModel extends _i1.Mock implements _i2.UpdatesModel {
  MockUpdatesModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SnapdService get snapd => (super.noSuchMethod(
        Invocation.getter(#snapd),
        returnValue: _FakeSnapdService_0(
          this,
          Invocation.getter(#snapd),
        ),
      ) as _i2.SnapdService);

  @override
  Iterable<String> get refreshableSnapNames => (super.noSuchMethod(
        Invocation.getter(#refreshableSnapNames),
        returnValue: <String>[],
      ) as Iterable<String>);

  @override
  _i3.AsyncValue<void> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_1<void>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.AsyncValue<void>);

  @override
  _i12.Stream<_i4.SnapdException> get errorStream => (super.noSuchMethod(
        Invocation.getter(#errorStream),
        returnValue: _i12.Stream<_i4.SnapdException>.empty(),
      ) as _i12.Stream<_i4.SnapdException>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i12.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  bool hasUpdate(String? snapName) => (super.noSuchMethod(
        Invocation.method(
          #hasUpdate,
          [snapName],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i12.Future<void> updateAll() => (super.noSuchMethod(
        Invocation.method(
          #updateAll,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> cancelChange(String? changeId) => (super.noSuchMethod(
        Invocation.method(
          #cancelChange,
          [changeId],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  void addListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GtkApplicationNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockGtkApplicationNotifier extends _i1.Mock
    implements _i18.GtkApplicationNotifier {
  MockGtkApplicationNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addCommandLineListener(_i18.GtkCommandLineListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #addCommandLineListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeCommandLineListener(_i18.GtkCommandLineListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removeCommandLineListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addOpenListener(_i18.GtkOpenListener? listener) => super.noSuchMethod(
        Invocation.method(
          #addOpenListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeOpenListener(_i18.GtkOpenListener? listener) => super.noSuchMethod(
        Invocation.method(
          #removeOpenListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyCommandLine(List<String>? args) => super.noSuchMethod(
        Invocation.method(
          #notifyCommandLine,
          [args],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyOpen({
    required List<String>? files,
    required String? hint,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #notifyOpen,
          [],
          {
            #files: files,
            #hint: hint,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PackageKitClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageKitClient extends _i1.Mock implements _i16.PackageKitClient {
  MockPackageKitClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set locale(String? _locale) => super.noSuchMethod(
        Invocation.setter(
          #locale,
          _locale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get background => (super.noSuchMethod(
        Invocation.getter(#background),
        returnValue: false,
      ) as bool);

  @override
  set background(bool? _background) => super.noSuchMethod(
        Invocation.setter(
          #background,
          _background,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get interactive => (super.noSuchMethod(
        Invocation.getter(#interactive),
        returnValue: false,
      ) as bool);

  @override
  set interactive(bool? _interactive) => super.noSuchMethod(
        Invocation.setter(
          #interactive,
          _interactive,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get idle => (super.noSuchMethod(
        Invocation.getter(#idle),
        returnValue: false,
      ) as bool);

  @override
  set idle(bool? _idle) => super.noSuchMethod(
        Invocation.setter(
          #idle,
          _idle,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get cacheAge => (super.noSuchMethod(
        Invocation.getter(#cacheAge),
        returnValue: 0,
      ) as int);

  @override
  set cacheAge(int? _cacheAge) => super.noSuchMethod(
        Invocation.setter(
          #cacheAge,
          _cacheAge,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get backendAuthor => (super.noSuchMethod(
        Invocation.getter(#backendAuthor),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#backendAuthor),
        ),
      ) as String);

  @override
  String get backendDescription => (super.noSuchMethod(
        Invocation.getter(#backendDescription),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#backendDescription),
        ),
      ) as String);

  @override
  String get backendName => (super.noSuchMethod(
        Invocation.getter(#backendName),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#backendName),
        ),
      ) as String);

  @override
  String get distroId => (super.noSuchMethod(
        Invocation.getter(#distroId),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#distroId),
        ),
      ) as String);

  @override
  Set<_i16.PackageKitFilter> get filters => (super.noSuchMethod(
        Invocation.getter(#filters),
        returnValue: <_i16.PackageKitFilter>{},
      ) as Set<_i16.PackageKitFilter>);

  @override
  Set<_i16.PackageKitGroup> get groups => (super.noSuchMethod(
        Invocation.getter(#groups),
        returnValue: <_i16.PackageKitGroup>{},
      ) as Set<_i16.PackageKitGroup>);

  @override
  bool get locked => (super.noSuchMethod(
        Invocation.getter(#locked),
        returnValue: false,
      ) as bool);

  @override
  List<String> get mimeTypes => (super.noSuchMethod(
        Invocation.getter(#mimeTypes),
        returnValue: <String>[],
      ) as List<String>);

  @override
  Set<_i16.PackageKitRole> get roles => (super.noSuchMethod(
        Invocation.getter(#roles),
        returnValue: <_i16.PackageKitRole>{},
      ) as Set<_i16.PackageKitRole>);

  @override
  _i16.PackageKitNetworkState get networkState => (super.noSuchMethod(
        Invocation.getter(#networkState),
        returnValue: _i16.PackageKitNetworkState.unknown,
      ) as _i16.PackageKitNetworkState);

  @override
  int get versionMajor => (super.noSuchMethod(
        Invocation.getter(#versionMajor),
        returnValue: 0,
      ) as int);

  @override
  int get versionMinor => (super.noSuchMethod(
        Invocation.getter(#versionMinor),
        returnValue: 0,
      ) as int);

  @override
  int get versionMicro => (super.noSuchMethod(
        Invocation.getter(#versionMicro),
        returnValue: 0,
      ) as int);

  @override
  _i12.Stream<List<String>> get propertiesChanged => (super.noSuchMethod(
        Invocation.getter(#propertiesChanged),
        returnValue: _i12.Stream<List<String>>.empty(),
      ) as _i12.Stream<List<String>>);

  @override
  _i12.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<_i7.PackageKitTransaction> getTransaction(
          _i19.DBusObjectPath? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransaction,
          [path],
        ),
        returnValue: _i12.Future<_i7.PackageKitTransaction>.value(
            _FakePackageKitTransaction_13(
          this,
          Invocation.method(
            #getTransaction,
            [path],
          ),
        )),
      ) as _i12.Future<_i7.PackageKitTransaction>);

  @override
  _i12.Future<_i7.PackageKitTransaction> createTransaction() =>
      (super.noSuchMethod(
        Invocation.method(
          #createTransaction,
          [],
        ),
        returnValue: _i12.Future<_i7.PackageKitTransaction>.value(
            _FakePackageKitTransaction_13(
          this,
          Invocation.method(
            #createTransaction,
            [],
          ),
        )),
      ) as _i12.Future<_i7.PackageKitTransaction>);

  @override
  _i12.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}

/// A class which mocks [PackageKitTransaction].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageKitTransaction extends _i1.Mock
    implements _i7.PackageKitTransaction {
  MockPackageKitTransaction() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Stream<_i16.PackageKitEvent> get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _i12.Stream<_i16.PackageKitEvent>.empty(),
      ) as _i12.Stream<_i16.PackageKitEvent>);

  @override
  set events(_i12.Stream<_i16.PackageKitEvent>? _events) => super.noSuchMethod(
        Invocation.setter(
          #events,
          _events,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.PackageKitRole get role => (super.noSuchMethod(
        Invocation.getter(#role),
        returnValue: _i16.PackageKitRole.unknown,
      ) as _i16.PackageKitRole);

  @override
  _i16.PackageKitStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i16.PackageKitStatus.unknown,
      ) as _i16.PackageKitStatus);

  @override
  String get lastPackage => (super.noSuchMethod(
        Invocation.getter(#lastPackage),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#lastPackage),
        ),
      ) as String);

  @override
  int get uid => (super.noSuchMethod(
        Invocation.getter(#uid),
        returnValue: 0,
      ) as int);

  @override
  int get percentage => (super.noSuchMethod(
        Invocation.getter(#percentage),
        returnValue: 0,
      ) as int);

  @override
  bool get allowCancel => (super.noSuchMethod(
        Invocation.getter(#allowCancel),
        returnValue: false,
      ) as bool);

  @override
  bool get callerActive => (super.noSuchMethod(
        Invocation.getter(#callerActive),
        returnValue: false,
      ) as bool);

  @override
  int get elapsedTime => (super.noSuchMethod(
        Invocation.getter(#elapsedTime),
        returnValue: 0,
      ) as int);

  @override
  int get remainingTime => (super.noSuchMethod(
        Invocation.getter(#remainingTime),
        returnValue: 0,
      ) as int);

  @override
  int get speed => (super.noSuchMethod(
        Invocation.getter(#speed),
        returnValue: 0,
      ) as int);

  @override
  int get downloadSizeRemaining => (super.noSuchMethod(
        Invocation.getter(#downloadSizeRemaining),
        returnValue: 0,
      ) as int);

  @override
  Set<_i16.PackageKitTransactionFlag> get transactionFlags =>
      (super.noSuchMethod(
        Invocation.getter(#transactionFlags),
        returnValue: <_i16.PackageKitTransactionFlag>{},
      ) as Set<_i16.PackageKitTransactionFlag>);

  @override
  _i12.Stream<List<String>> get propertiesChanged => (super.noSuchMethod(
        Invocation.getter(#propertiesChanged),
        returnValue: _i12.Stream<List<String>>.empty(),
      ) as _i12.Stream<List<String>>);

  @override
  _i12.Future<void> cancel() => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> dependsOn(
    Iterable<_i16.PackageKitPackageId>? packageIds, {
    Set<_i16.PackageKitFilter>? filter = const {},
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependsOn,
          [packageIds],
          {
            #filter: filter,
            #recursive: recursive,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> getDetails(
          Iterable<_i16.PackageKitPackageId>? packageIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetails,
          [packageIds],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> getDetailsLocal(Iterable<String>? paths) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetailsLocal,
          [paths],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> downloadPackages(
    Iterable<_i16.PackageKitPackageId>? packageIds, {
    bool? storeInCache = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadPackages,
          [packageIds],
          {#storeInCache: storeInCache},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> getFiles(Iterable<_i16.PackageKitPackageId>? packageIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFiles,
          [packageIds],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> getFilesLocal(Iterable<String>? paths) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilesLocal,
          [paths],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> getPackages(
          {Set<_i16.PackageKitFilter>? filter = const {}}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPackages,
          [],
          {#filter: filter},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> getRepositoryList(
          {Set<_i16.PackageKitFilter>? filter = const {}}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRepositoryList,
          [],
          {#filter: filter},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setRepositoryEnabled(
    String? id,
    bool? enabled,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setRepositoryEnabled,
          [
            id,
            enabled,
          ],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setRepositoryData(
    String? id,
    String? parameter,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setRepositoryData,
          [
            id,
            parameter,
            value,
          ],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> removeRepository(
    String? id, {
    bool? autoremovePackages = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeRepository,
          [id],
          {#autoremovePackages: autoremovePackages},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> getUpdateDetail(
          Iterable<_i16.PackageKitPackageId>? packageIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUpdateDetail,
          [packageIds],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> getUpdates(
          {Set<_i16.PackageKitFilter>? filter = const {}}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUpdates,
          [],
          {#filter: filter},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> installFiles(
    Iterable<String>? paths, {
    Set<_i16.PackageKitTransactionFlag>? transactionFlags = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #installFiles,
          [paths],
          {#transactionFlags: transactionFlags},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> installPackages(
    Iterable<_i16.PackageKitPackageId>? packageIds, {
    Set<_i16.PackageKitTransactionFlag>? transactionFlags = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #installPackages,
          [packageIds],
          {#transactionFlags: transactionFlags},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> refreshCache({bool? force = false}) => (super.noSuchMethod(
        Invocation.method(
          #refreshCache,
          [],
          {#force: force},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> removePackages(
    Iterable<_i16.PackageKitPackageId>? packageIds, {
    Set<_i16.PackageKitTransactionFlag>? transactionFlags = const {},
    bool? allowDeps = false,
    bool? autoremove = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removePackages,
          [packageIds],
          {
            #transactionFlags: transactionFlags,
            #allowDeps: allowDeps,
            #autoremove: autoremove,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> resolve(
    Iterable<String>? packages, {
    Set<_i16.PackageKitTransactionFlag>? transactionFlags = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolve,
          [packages],
          {#transactionFlags: transactionFlags},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> searchFiles(
    Iterable<String>? values, {
    Set<_i16.PackageKitFilter>? filter = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchFiles,
          [values],
          {#filter: filter},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> searchNames(
    Iterable<String>? values, {
    Set<_i16.PackageKitFilter>? filter = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchNames,
          [values],
          {#filter: filter},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> updatePackages(
    Iterable<_i16.PackageKitPackageId>? packageIds, {
    Set<_i16.PackageKitTransactionFlag>? transactionFlags = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePackages,
          [packageIds],
          {#transactionFlags: transactionFlags},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> upgradeSystem(
    String? distroId,
    _i16.PackageKitDistroUpgrade? upgradeKind, {
    Set<_i16.PackageKitTransactionFlag>? transactionFlags = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #upgradeSystem,
          [
            distroId,
            upgradeKind,
          ],
          {#transactionFlags: transactionFlags},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}

/// A class which mocks [RatingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRatingsService extends _i1.Mock implements _i20.RatingsService {
  MockRatingsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.RatingsClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeRatingsClient_14(
          this,
          Invocation.getter(#client),
        ),
      ) as _i10.RatingsClient);

  @override
  _i12.Future<_i10.Rating?> getRating(String? snapId) => (super.noSuchMethod(
        Invocation.method(
          #getRating,
          [snapId],
        ),
        returnValue: _i12.Future<_i10.Rating?>.value(),
      ) as _i12.Future<_i10.Rating?>);

  @override
  _i12.Future<void> vote(_i10.Vote? vote) => (super.noSuchMethod(
        Invocation.method(
          #vote,
          [vote],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<List<_i10.Vote>> listMyVotes(String? snapFilter) =>
      (super.noSuchMethod(
        Invocation.method(
          #listMyVotes,
          [snapFilter],
        ),
        returnValue: _i12.Future<List<_i10.Vote>>.value(<_i10.Vote>[]),
      ) as _i12.Future<List<_i10.Vote>>);

  @override
  _i12.Future<List<_i10.Vote>> getSnapVotes(String? snapId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnapVotes,
          [snapId],
        ),
        returnValue: _i12.Future<List<_i10.Vote>>.value(<_i10.Vote>[]),
      ) as _i12.Future<List<_i10.Vote>>);
}

/// A class which mocks [RatingsClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockRatingsClient extends _i1.Mock implements _i10.RatingsClient {
  MockRatingsClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<String> authenticate(String? id) => (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [id],
        ),
        returnValue: _i12.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #authenticate,
            [id],
          ),
        )),
      ) as _i12.Future<String>);

  @override
  _i12.Future<void> delete(String? token) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [token],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<List<_i21.ChartData>> getChart(
    _i21.Timeframe? timeframe,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChart,
          [
            timeframe,
            token,
          ],
        ),
        returnValue:
            _i12.Future<List<_i21.ChartData>>.value(<_i21.ChartData>[]),
      ) as _i12.Future<List<_i21.ChartData>>);

  @override
  _i12.Future<_i10.Rating> getRating(
    String? snapId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRating,
          [
            snapId,
            token,
          ],
        ),
        returnValue: _i12.Future<_i10.Rating>.value(_FakeRating_15(
          this,
          Invocation.method(
            #getRating,
            [
              snapId,
              token,
            ],
          ),
        )),
      ) as _i12.Future<_i10.Rating>);

  @override
  _i12.Future<List<_i10.Vote>> getSnapVotes(
    String? snapId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnapVotes,
          [
            snapId,
            token,
          ],
        ),
        returnValue: _i12.Future<List<_i10.Vote>>.value(<_i10.Vote>[]),
      ) as _i12.Future<List<_i10.Vote>>);

  @override
  _i12.Future<List<_i10.Vote>> listMyVotes(
    String? snapIdFilter,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #listMyVotes,
          [
            snapIdFilter,
            token,
          ],
        ),
        returnValue: _i12.Future<List<_i10.Vote>>.value(<_i10.Vote>[]),
      ) as _i12.Future<List<_i10.Vote>>);

  @override
  _i12.Future<void> vote(
    String? snapId,
    int? snapRevision,
    bool? voteUp,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #vote,
          [
            snapId,
            snapRevision,
            voteUp,
            token,
          ],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}

/// A class which mocks [AppstreamService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppstreamService extends _i1.Mock implements _i6.AppstreamService {
  MockAppstreamService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
      ) as bool);

  @override
  int get cacheSize => (super.noSuchMethod(
        Invocation.getter(#cacheSize),
        returnValue: 0,
      ) as int);

  @override
  _i12.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<List<_i8.AppstreamComponent>> search(String? search) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [search],
        ),
        returnValue: _i12.Future<List<_i8.AppstreamComponent>>.value(
            <_i8.AppstreamComponent>[]),
      ) as _i12.Future<List<_i8.AppstreamComponent>>);

  @override
  _i8.AppstreamComponent getFromId(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getFromId,
          [id],
        ),
        returnValue: _FakeAppstreamComponent_6(
          this,
          Invocation.method(
            #getFromId,
            [id],
          ),
        ),
      ) as _i8.AppstreamComponent);
}

/// A class which mocks [PackageKitService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageKitService extends _i1.Mock implements _i7.PackageKitService {
  MockPackageKitService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAvailable => (super.noSuchMethod(
        Invocation.getter(#isAvailable),
        returnValue: false,
      ) as bool);

  @override
  _i12.Stream<_i16.PackageKitErrorCodeEvent> get errorStream =>
      (super.noSuchMethod(
        Invocation.getter(#errorStream),
        returnValue: _i12.Stream<_i16.PackageKitErrorCodeEvent>.empty(),
      ) as _i12.Stream<_i16.PackageKitErrorCodeEvent>);

  @override
  _i7.PackageKitTransaction? getTransaction(int? id) =>
      (super.noSuchMethod(Invocation.method(
        #getTransaction,
        [id],
      )) as _i7.PackageKitTransaction?);

  @override
  _i12.Future<void> activateService() => (super.noSuchMethod(
        Invocation.method(
          #activateService,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> waitTransaction(int? id) => (super.noSuchMethod(
        Invocation.method(
          #waitTransaction,
          [id],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> cancelTransaction(int? id) => (super.noSuchMethod(
        Invocation.method(
          #cancelTransaction,
          [id],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<int> install(_i16.PackageKitPackageId? packageId) =>
      (super.noSuchMethod(
        Invocation.method(
          #install,
          [packageId],
        ),
        returnValue: _i12.Future<int>.value(0),
      ) as _i12.Future<int>);

  @override
  _i12.Future<int> installLocal(String? path) => (super.noSuchMethod(
        Invocation.method(
          #installLocal,
          [path],
        ),
        returnValue: _i12.Future<int>.value(0),
      ) as _i12.Future<int>);

  @override
  _i12.Future<int> remove(_i16.PackageKitPackageId? packageId) =>
      (super.noSuchMethod(
        Invocation.method(
          #remove,
          [packageId],
        ),
        returnValue: _i12.Future<int>.value(0),
      ) as _i12.Future<int>);

  @override
  _i12.Future<_i16.PackageKitPackageEvent?> resolve(
    String? name, [
    String? architecture,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolve,
          [
            name,
            architecture,
          ],
        ),
        returnValue: _i12.Future<_i16.PackageKitPackageEvent?>.value(),
      ) as _i12.Future<_i16.PackageKitPackageEvent?>);

  @override
  _i12.Future<_i16.PackageKitDetailsEvent?> getDetailsLocal(String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetailsLocal,
          [path],
        ),
        returnValue: _i12.Future<_i16.PackageKitDetailsEvent?>.value(),
      ) as _i12.Future<_i16.PackageKitDetailsEvent?>);

  @override
  _i12.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}

/// A class which mocks [Vote].
///
/// See the documentation for Mockito's code generation for more information.
class MockVote extends _i1.Mock implements _i10.Vote {
  MockVote() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get snapId => (super.noSuchMethod(
        Invocation.getter(#snapId),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#snapId),
        ),
      ) as String);

  @override
  int get snapRevision => (super.noSuchMethod(
        Invocation.getter(#snapRevision),
        returnValue: 0,
      ) as int);

  @override
  bool get voteUp => (super.noSuchMethod(
        Invocation.getter(#voteUp),
        returnValue: false,
      ) as bool);

  @override
  DateTime get dateTime => (super.noSuchMethod(
        Invocation.getter(#dateTime),
        returnValue: _FakeDateTime_16(
          this,
          Invocation.getter(#dateTime),
        ),
      ) as DateTime);

  @override
  _i10.$VoteCopyWith<_i10.Vote> get copyWith => (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$VoteCopyWith_17<_i10.Vote>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i10.$VoteCopyWith<_i10.Vote>);
}
